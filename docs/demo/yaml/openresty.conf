worker_processes  2;        
error_log logs/error.log;   
events {
    worker_connections 1024;
}

stream {
    log_format main '$remote_addr [$time_local] $protocol $status';  
    access_log logs/access.log main buffer=16384 flush=3;  

    # $prefix 为 启动openresty 时的参数 -p prefix 
    # 下面比较长的路径是将各种情况列举处理，基本满足了一般liunx环境下依赖包搜索的大部分可能性
    lua_package_path  "$prefix/deps/share/lua/5.1/?.lua;$prefix/deps/share/lua/5.1/?/init.lua;$prefix/?.lua;$prefix/?/init.lua;;./?.lua;/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?/init.lua;";
    lua_package_cpath "$prefix/deps/lib64/lua/5.1/?.so;$prefix/deps/lib/lua/5.1/?.so;;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;";
    # 开启 lua code 缓存
    lua_code_cache on;  

    init_by_lua_block {
        -- 文件读取比较长，这里用函数避免影响大家理解
        local function read_all(path)
            local open  = io.open
            local close = io.close
            local file, data, err
            file, err = open(path, "rb")
            if not file then
                return nil, "open: " .. path .. " with error: " .. err
            end

            data, err = file:read("*all")
            if err ~= nil then
                file:close()
                return nil, "read: " .. path .. " with error: " .. err
            end

            file:close()
            return data
        end
    
        local yaml_path = ngx.config.prefix()..'/conf.yaml'
        -- 读取 yaml 文件
        local content, err = read_all(yaml_path)
        -- 转换yaml数据为lua table结构
        local yaml = require("tinyyaml")
        local conf = yaml.parse(content)
        -- 设置到全局变量中
        upstreams = conf.upstream

        -- 开启特权进程
        local process = require("ngx.process")
        local ok, err = process.enable_privileged_agent()
        if not ok then
            log.error("failed to enable privileged_agent: ", err)
        end
    }        

    init_worker_by_lua_block {
        -- 限制只允许特权进程执行 文件监听
        if require("ngx.process").type() ~= "privileged agent" then
            return
        end
        -- 对比变化占位变量
        local yaml_change_time = nil
        ngx.timer.every(1, function()
            -- 获取文件属性
            local lfs    = require("lfs")
            local yaml_path = ngx.config.prefix()..'/conf.yaml'
            local attributes, err = lfs.attributes(yaml_path)
            if not attributes then
                ngx.log(ngx.ERR, "failed to fetch ", yaml_path, " attributes: ", err)
                return
            end
            -- 对比变化时间
            local last_change_time = attributes.change
            if yaml_change_time == last_change_time then
                return
            end
            yaml_change_time = last_change_time
            -- 发送热重启信号
            local signal = require('resty.signal')
            signal.kill(require("ngx.process").get_master_pid(), signal.signum("HUP"))
        end)
    }

    upstream nature_upstream {
        server 127.0.0.1:80; # 占位，因为openresty 配置语法检查必须要有

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local upstream = ngx.ctx.api_ctx.upstream
            local ok, err = balancer.set_current_peer(upstream.host, upstream.port)
            -- 核心靠set_current_peer方法设置请求转发的地址， 需注意host必须为ip，所以域名只能自己先dns解析到ip使用
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(ngx.ERROR)
            end
        }
    }

    server {
        listen 8699 reuseport;
        listen 8689 reuseport; #添加一个其他端口模拟测试没有端口配置的情况

        proxy_pass nature_upstream; 

        preread_by_lua_block {
            -- ngx.var.server_port 该变量可以获取到当前请求访问到的port
            -- 我们这里用port确定后端upstream 是哪个
            -- 没有对应配置则直接返回404 终止该tcp连接
            -- 这里故意加了个a前缀以区分之前的测试代码
            local upstream = upstreams['a'..tostring(ngx.var.server_port)]
            if upstream then
                ngx.ctx.api_ctx = { upstream = upstream }
            else
                ngx.exit(404)
            end
            
        }
    }
}

http {
    server {
        listen 6699;
        location / {
            default_type text/html;

            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }
    }
}