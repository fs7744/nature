worker_processes  1;        
error_log logs/error.log;   
events {
    worker_connections 1024;
}

stream {
    log_format main '$remote_addr [$time_local] $protocol $status';  
    access_log logs/access.log main buffer=16384 flush=3;    

    init_by_lua_block {
        -- 初始化数据，这里先模拟
        upstreams = {['8699'] = { host ="127.0.0.1", port = 6699 }}
    }        

    upstream nature_upstream {
        server 127.0.0.1:80; # 占位，因为openresty 配置语法检查必须要有

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"
            local upstream = ngx.ctx.api_ctx.upstream
            local ok, err = balancer.set_current_peer(upstream.host, upstream.port)
            -- 核心靠set_current_peer方法设置请求转发的地址， 需注意host必须为ip，所以域名只能自己先dns解析到ip使用
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(ngx.ERROR)
            end
        }
    }

    server {
        listen 8699 reuseport;
        listen 8689 reuseport; #添加一个其他端口模拟测试没有端口配置的情况

        proxy_pass nature_upstream; 

        preread_by_lua_block {
            -- ngx.var.server_port 该变量可以获取到当前请求访问到的port
            -- 我们这里用port确定后端upstream 是哪个
            -- 没有对应配置则直接返回404 终止该tcp连接
            local upstream = upstreams[tostring(ngx.var.server_port)]
            if upstream then
                ngx.ctx.api_ctx = { upstream = upstream }
            else
                ngx.exit(404)
            end
            
        }
    }
}

http {
    server {
        listen 6699;
        location / {
            default_type text/html;

            content_by_lua_block {
                ngx.say("HelloWorld")
            }
        }
    }
}