pid       logs/nginx.pid;
error_log logs/error.log info;

worker_processes 1;

events {
    accept_mutex off;
    worker_connections 512;
}

stream {
    lua_package_path  "$prefix/deps/share/lua/5.1/?.lua;$prefix/deps/share/lua/5.1/?/init.lua;$prefix/?.lua;$prefix/?/init.lua;;./?.lua;/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?/init.lua;";
    lua_package_cpath "$prefix/deps/lib64/lua/5.1/?.so;$prefix/deps/lib/lua/5.1/?.so;;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;";
    lua_socket_log_errors off;
    lua_code_cache on;

    lua_shared_dict stream_healthcheck 20m;
    lua_shared_dict stream_lrucache_lock 10m;
    lua_shared_dict stream_process_events 50m;
    lua_shared_dict stream_balancer-ewma 10m;
    lua_shared_dict stream_balancer-ewma-last-touched-at 10m;


    resolver 10.16.73.7 10.16.83.7 10.16.42.7 ipv6=off;

    log_format main '$remote_addr [$time_local] $protocol $status $bytes_sent $bytes_received $session_time $hostname $server_addr';
    access_log logs/access.log main buffer=16384 flush=3;

    upstream nature_upstream {
        server 0.0.0.1:80;

        balancer_by_lua_block {
            Nature.balancer()
        }
    }

    init_by_lua_block {
        Nature = require 'nature'
        Nature.init([[{"mode":"yaml","conf":".\/demo\/tcp\/tcp.conf","check_conf":true,"events_sock":"unix:\/tmp\/event.sock","home":"\/mnt\/d\/code\/github\/nature","file":".\/demo\/tcp\/tcp.yaml"}]])
    }

    init_worker_by_lua_block {
        Nature.init_worker()
    }

    server {
        listen 127.0.0.1:8980 reuseport;
    
        


        preread_by_lua_block {
            Nature.stream_preread()
        }

        proxy_pass nature_upstream;

        log_by_lua_block {
            Nature.log()
        }
    }
}



http {
    lua_package_path  "$prefix/deps/share/lua/5.1/?.lua;$prefix/deps/share/lua/5.1/?/init.lua;$prefix/?.lua;$prefix/?/init.lua;;./?.lua;/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?/init.lua;";
    lua_package_cpath "$prefix/deps/lib64/lua/5.1/?.so;$prefix/deps/lib/lua/5.1/?.so;;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;";
    lua_socket_log_errors off;
    lua_code_cache on;

    client_body_temp_path /tmp/client_body_temp;
    fastcgi_temp_path /tmp/fastcgi_temp;
    scgi_temp_path /tmp/scgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    proxy_temp_path /tmp/proxy_temp;
    lua_shared_dict healthcheck 20m;
    lua_shared_dict lrucache_lock 10m;
    lua_shared_dict process_events 50m;
    lua_shared_dict balancer-ewma 10m;
    lua_shared_dict balancer-ewma-last-touched-at 10m;


    resolver 10.16.73.7 10.16.83.7 10.16.42.7 ipv6=off;

    log_format main '$remote_addr [$time_local] $status $request_time $upstream_status $upstream_addr $upstream_response_time $upstream_uri $upstream_scheme';
    access_log logs/access.log main buffer=16384 flush=3;

    upstream nature_upstream {
        server 0.0.0.1:80;

        balancer_by_lua_block {
            Nature.balancer()
        }
    }

    init_by_lua_block {
        Nature = require 'nature'
        Nature.init([[{"mode":"yaml","conf":".\/demo\/tcp\/tcp.conf","check_conf":true,"events_sock":"unix:\/tmp\/event.sock","home":"\/mnt\/d\/code\/github\/nature","file":".\/demo\/tcp\/tcp.yaml"}]])
    }

    init_worker_by_lua_block {
        Nature.init_worker()
    }

    server {
        listen 127.0.0.1:8981 reuseport;
    
        


        location / {
            set $upstream_mirror_host        '';
            set $upstream_scheme             '';
            set $upstream_uri                '';
            set $upstream_upgrade                '';
            set $upstream_connection                '';
            set $reason     '';

            access_by_lua_block {
                Nature.access()
            }

            proxy_http_version                  1.1;

            proxy_set_header Upgrade $upstream_upgrade;
            proxy_set_header Connection $upstream_connection;
            proxy_set_header  Host    $proxy_host;
            proxy_pass      $upstream_scheme://nature_upstream$upstream_uri;

            header_filter_by_lua_block {
                Nature.header_filter()
            }

            body_filter_by_lua_block {
                Nature.body_filter()
            }

            log_by_lua_block {
                Nature.log()
            }
        }
    }

    server {
        listen unix:/tmp/event.sock;
        location / {
            content_by_lua_block {
                require('nature.core.events').run()
            }
        }
    }
}

